#!/bin/bash
#
# Drupal Code Review
#
# A lightweight wrapper around phpcs.
#
# dcr --help for usage.

CURRENT_DIR=$(pwd)
DCR_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
CONF=".dcr.yml"
EXAMPLE_CONF="example.dcr.yml"

TARGETS=""
EXTENSIONS=""
STANDARDS=""

#
# Help message output.
#
function show_help() {
  echo "Drupal Code Review"
  echo
  echo "Usage:"
  echo "dcr [--explain] [--brief] [*phpcs options] [<file or dir>]"
  echo
  echo "--explain       Show sniff codes oin all reports"
  echo "--brief         Show check progress only (no report). Usefull for CI."
  echo "*phpcs options  Any phpcs options ('phpcs --help' for options list)."
  echo "file or dir     Custom file or directory to check."
}

#
# Main entry point.
#
function main() {
  custom_options=""
  passthrough_option="--colors"
  passthrough_targets=""

  for i in "$@"
  do
    case $i in
      --help)
      show_help
      return
      ;;
      install)
      install
      return
      ;;
      --explain)
      custom_options="${custom_options} -s"
      shift # past argument with no value
      ;;
      --brief)
      custom_options="${custom_options} -p --report-file=/dev/null"
      shift # past argument with no value
      ;;
      *)
      # Passthrough all unknown options.
      if [ "${i:0:1}" == "-" ] || [ "${i:0:2}" == "--" ]; then
        passthrough_option="${passthrough_option} ${i}"
      else
        passthrough_targets="${passthrough_targets} ${i}"
      fi
      shift
      ;;
    esac
  done

  # Read config from the file.
  conf_file=$CURRENT_DIR/$CONF
  if [ ! -f $conf_file ] ; then
    echo "Unable to open DCR config file $conf_file. Please copy $DCR_DIR/$EXAMPLE_CONF to $conf_file."
    return 1
  fi

  # Include configuration from YAML file.
  eval $(parse_yaml $conf_file "conf_")

  # Validate and set parameters.
  if [ ${conf_extensions+x} ] ; then
    custom_options="--extensions=$conf_extensions $custom_options"
  fi

  if [ ${conf_standards+x} ] ; then
    custom_options="--standard=$conf_standards $custom_options"
  fi

  # Re-write targets if custom ones where passed to this script.
  if [ "$passthrough_targets" == "" ] ; then
    # Check that targets were provided in cofig.
    if [ ${conf_targets+x} ] ; then
      passthrough_targets=$conf_targets
    else
      echo "No targets were provided"
      return 1
    fi
  fi

  # Pass-through options always override any default and custom options.
  phpcs $custom_options $passthrough_option $passthrough_targets
  return $?
}

#
# Additional installation steps.
#
function install() {
  # Add bin to PATH.
  if [ -d vendor/bin ] ; then
    bindir=$(pwd)/vendor/bin
  else
    bindir=$HOME/.composer/vendor/bin
  fi

  if /bin/cat ~/.profile | /bin/grep -ohq "PATH=$bindir:\$PATH\$"; then
    echo "DCR bin directory $bindir is already in PATH";
  else
    echo "PATH=$bindir:\$PATH" >> $HOME/.profile;
    echo "Added DCR bin directory $bindir to PATH";
  fi
  . $HOME/.profile;

  # Add code sniffer path to phpcs config.
  phpcs=$(which phpcs)

  if [[ "$phpcs" =~ "vendor" ]]; then
    phpcs --config-set installed_paths ~/.composer/vendor/drupal/coder/coder_sniffer
  else
    echo "Incorrect phpcs is in use. Make sure that phpcs is available in this session."
    return 1
  fi

  # Copy config file.
  conf_file=$CURRENT_DIR/$CONF
  if [ -f $conf_file ] ; then
    echo "Skipping copying of config file - file $conf_file exists."
  else
    cp $DCR_DIR/$EXAMPLE_CONF $conf_file
    echo "Copied example config file $DCR_DIR/$EXAMPLE_CONF to $conf_file."
  fi
}

#
# Simple key/value YAML parser.
#
parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

main "$@"
