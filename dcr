#!/usr/bin/env bash

# Drupal Code Review
#
# A lightweight wrapper around phpcs.
#
# Installation (local):
# 1. Pull all dependencies:
# composer require alexdesignworks/dcr
# 2. Link and copy required files (composer does not let to execute scripts):
# source vendor/bin/dcr install
#
# Usage: dcr --help for usage.
#
# .dcr.yml file can be stored in the root of your project (same level with
# 'vendor' dir) or in it's parent directory.
#
# dcr must be invoked from project root or one of it's sub-directories.
#
#echo ${BASH_SOURCE[0]}
#source realpath-lib

# Configuration file name.
readonly DCR_CONF=".dcr.yml"
# Configuration example file name.
readonly DCR_CONF_EXAMPLE="example.dcr.yml"

# .jscsrc file name.
readonly DCR_JSCSRC_CONF=".jscsrc"
# .jscsrc example file name.
readonly DCR_JSCSRC_CONF_EXAMPLE=".jscsrc.drupal"

# Directory with App standards.
readonly DCR_APP_STANDARDS_DIR=dcr_standards

# Array of known standards paths within vendor directory.
# Use 'dcr -i' to check which standards are available.
# Available tokens:
# %vendor% - composer vendor directory.
# %dcr% - dcr file location directory.
# %current% - the directory where the script was invoked in.
# %project% - project root directory (where the DCR_CONF file is).
readonly DCR_STANDARDS_PATHS=(
  %vendor%/drupal/coder/coder_sniffer
  %dcr%/php_codesniffer
  %project%/$DCR_APP_STANDARDS_DIR
)

# The file to write DCR path into.
readonly DCR_PATH_FILE=$HOME/.profile

#
# Help message output.
#
show_help() {
  echo "Drupal Code Review"
  echo
  echo "Installation (global):"
  echo "composer global require alexdesignworks/dcr"
  echo "\$(composer config -g bin-dir)/dcr install"
  echo
  echo "Installation (local):"
  echo "composer require alexdesignworks/dcr"
  echo "\$(composer config bin-dir)/dcr install"
  echo
  echo "Lint:"
  echo "dcr [--explain] [--brief] [*phpcs options] [<file or dir>]"
  echo
  echo "info,           Show DCR installation information"
  echo "--info"
  echo "explain,        Show sniff codes in all reports"
  echo "--explain"
  echo "--brief         Show check progress only (no report). Useful for CI."
  echo "*phpcs options  Any phpcs options ('phpcs --help' for options list)."
  echo "file or dir     Custom file or directory to check."
  echo
  echo "Fix:"
  echo "dcr fix [*phpcbf options] [<file or dir>]"
  echo
  echo "fix             Fix all warnings and errors"
  echo "*phpcbf options Any phpcbf options ('phpcbf --help' for options list)."
  echo "file or dir     Custom file or directory to check."
}

#
# Main entry point.
#
main() {
  local command_phpcs=$(which phpcs)
  local command_phpcbf=$(which phpcbf)
  local binary=$command_phpcs
  local custom_options=""
  local custom_targets=""
  local passthrough_options=""
  local passthrough_targets=""

  for i in "$@"
  do
    case $i in
      --help|help)
      show_help
      return
      ;;
      --info|info)
      install_info
      return
      ;;
      install)
      install
      return
      ;;
      fix)
      binary=$command_phpcbf
      custom_options="${custom_options} --no-patch"
      shift
      ;;
      --explain|explain)
      custom_options="${custom_options} -s"
      shift
      ;;
      --brief)
      custom_options="${custom_options} -p --report-file=/dev/null"
      shift
      ;;
      *)
      # Passthrough all unknown options.
      if [ "${i:0:1}" == "-" ] || [ "${i:0:2}" == "--" ]; then
        passthrough_options="${passthrough_options} ${i}"
      else
        passthrough_targets="${passthrough_targets} ${i}"
      fi
      shift
      ;;
    esac
  done

  local project_dir=$(get_conf_dir)
  local dcr_bin_dir=$(get_dcr_dir)
  local current_dir=$(get_current_dir)

  # Add a guard for running from project dir or one of its sub-dirs to make sure
  # that all paths are properly resolved.
  if [[ ! "$current_dir" =~ "$project_dir" ]] ; then
    secho error "dcr has to be run from project dir (${project_dir}) or one of it's sub-directories"
    return 1
  fi

  # Read config from the file.
  local conf_file=$(get_conf_file)

  # Error if config does not exist.
  if [ "$conf_file" == "" ] ; then
    secho error "Unable to open DCR config file. Please copy $dcr_bin_dir/$DCR_CONF_EXAMPLE to the project root."
    return 1
  fi

  # But try to include config for pass-through targets to use config from file.
  if [ -f $conf_file ] ; then
    eval $(parse_yaml $conf_file "conf_")
  fi

  # Validate and set parameters.
  if [ ${conf_extensions+x} ] ; then
    custom_options="--extensions=$conf_extensions $custom_options"
  fi

  if [ ${conf_standards+x} ] ; then
    custom_options="--standard=$conf_standards $custom_options"
  fi

  # Re-write targets if custom ones where passed to this script.
  if [ "$passthrough_targets" != "" ] ; then
    # Targets passed to this script.
    custom_targets=$passthrough_targets
  else
    # Check that targets were provided in config.
    if [ ${conf_targets+x} ] && [ "$conf_targets" != "" ] ; then
      custom_targets=$conf_targets
    elif [ "${passthrough_options}" == "" ] ; then
      # No options were passed and no options were read from config.
      secho error "No targets were provided"
      return 1
    fi
  fi

  # Use custom parameters from config.
  if [ ${conf_parameters+x} ] ; then
    custom_options="${custom_options} ${conf_parameters}"
  fi

  # Pass-through options always override any default and custom options.
  cd $project_dir
  $binary $custom_options $passthrough_options $custom_targets
  local return_code=$?
  cd $DCR_CURRENT_DIR

  # Output message for phpcs.
  if [ "$binary" == "$command_phpcs" ] ; then
    # Output success message, but only if it was set in config and this is not
    # a non-targeted run.
    if [ ${return_code} -eq 0 ] && [ ${conf_success+x} ] && [[ ! "${passthrough_options}" =~ "-i" ]] ; then
      echo
      cecho green "${conf_success}"
    fi

    # Output fail message, but only if it was set in config and this is not
    # a non-targeted run.
    if [ ${return_code} -eq 1 ] && [ ${conf_fail+x} ] && [[ ! "${passthrough_options}" =~ "-i" ]] ; then
      echo
      cecho red "${conf_fail}"
    fi
  fi

  return $return_code
}

#
# Additional installation steps.
#
install() {
  local command_grep=$(which grep)
  local command_cat=$(which cat)

  # Print installation information.
  install_info

  # Config file is used to find current working directory, so the very first
  # check is to make sure that config file exist and create it if it does not.
  create_config_file

  # Make sure that DCR is symlink into composer bin.
  symlink_file $(get_dcr) $(get_composer_bin_dir)/dcr

  # To allow access to DCR binary from anywhere in the system, composer's binary
  # directory needs to be added to the $PATH environment variable.
  add_environment_path $(get_composer_bin_dir) $DCR_PATH_FILE

  # Register code sniffer install path to phpcs config to allow proper standards
  # path resolution. This also handles paths for global and local installation.
  register_codesniffer_standards

  # Separately add JS code sniffer.
  install_jscs

  # To allow access to JSCS binary from anywhere in the system, npm's binary
  # directory needs to be added to the $PATH environment variable.
  add_environment_path $(get_jscs_bin_dir) $DCR_PATH_FILE

  # Register JSCS standards.
  register_jscs_standards

  # Validate that DCR was successfully installed.
  validate_install

  return $?
}

#
# Installation information for all variables used.
#
install_info() {
  echo "--------------------------------------------------------------------------------"
  echo " DCR installation information"
  echo "--------------------------------------------------------------------------------"
  echo " DCR location:          " $(get_dcr)
  echo " DCR dir location:      " $(get_dcr_dir)
  echo " DCR installation type: " $(get_install_type)
  echo " Config file:           " $(get_conf_file)
  echo " Config file dir:       " $(get_conf_dir)
  echo " Composer home:         " $(get_composer_home_dir)
  echo " Composer vendor:       " $(get_composer_vendor_dir)
  echo " Composer bin:          " $(get_composer_bin_dir)
  echo " Current directory:     " $(get_current_dir)
  echo "--------------------------------------------------------------------------------"
  echo
}

#
# Validate that config file exists and create one if it does not.
#
create_config_file() {
  local conf_file=$(get_conf_file)
  local dcr_dir=$(get_dcr_dir)

  if [ -n "$conf_file" ] && [ -f $conf_file ] ; then
    secho status "Skipping copying of config file - file $conf_file exists."
  else
    local new_conf_file=$(get_current_dir)/$DCR_CONF
    cp $dcr_dir/$DCR_CONF_EXAMPLE $new_conf_file
    secho changed "Copied example config file $dcr_dir/$DCR_CONF_EXAMPLE to $new_conf_file."
  fi
}

#
# Symlink file into location, if it does not exist.
#
symlink_file() {
  local src=$1
  local dst=$2

  if [ ! -L "$dst" ] ; then
    ln -s $src $dst
    secho changed "Symlinked $src into $dst"
  fi
}


#
# Add environment path.
#
add_environment_path() {
  local text=$1
  local path_file=$2

  local command_grep=$(which grep)
  local command_cat=$(which cat)
  if echo $PATH | $command_grep -ohq "$text"; then
    secho status "Directory $text is already in PATH"
  else
    if $command_cat $path_file | $command_grep -ohq "PATH=$text:\$PATH\$"; then
      secho status "Directory $text already exported into file $path_file"
    else
      echo "PATH=$text:\$PATH" >> $path_file;
    fi

    export PATH=$text:$PATH
    if echo $PATH | $command_grep -ohq "$text"; then
      secho changed "Added directory $text to current session PATH"
    else
      secho error "Unable to add directory $text to PATH"
      return 1
    fi
  fi
}

#
# Create APP standards directory.
#
create_app_standards() {
  local conf_dir=$(get_conf_dir)

  if [ -z "$conf_dir" ] ; then
    secho error "Unable to copy $DCR_APP_STANDARDS_DIR directory"
    return 1
  fi

  # Add App standard directory to current dir to allow ruleset customisations.
  if [ ! -d "$conf_dir/$DCR_APP_STANDARDS_DIR" ] ; then
    cp -r $(get_dcr_dir)/$DCR_APP_STANDARDS_DIR $conf_dir
    secho changed "Copied $DCR_APP_STANDARDS_DIR directory to $conf_dir"
  else
    secho status "$DCR_APP_STANDARDS_DIR directory already exists at $conf_dir"
  fi
}

#
# Register all codesniffer standards.
#
register_codesniffer_standards() {
  local paths=("${DCR_STANDARDS_PATHS[@]}")
  local command_phpcs=$(which phpcs)
  local command_phpcbf=$(which phpcbf)
  local composer_bin=$(get_composer_bin_dir)

  # Check that phpcs is available. By the time this function is called all
  # composer binaries should already be exposed to PATH.
  if [ "$command_phpcs" != "$composer_bin/phpcs" ] || [ "$command_phpcbf" != "$composer_bin/phpcbf" ] ; then
    secho error "Incorrect phpcs or phpcbf is in use. Make sure that boths phpcs and phpcbf are available in this session."
    return 1
  fi

  # Add App standard directory to allow ruleset customisations.
  create_app_standards

  local installed_paths=""
  # Traverse all known sniffs locations and check for their existence before
  # setting.
  local count=0
  while [ "x${paths[count]}" != "x" ]
  do
     # Replace path tokens.
     standard_path=${paths[count]}
     standard_path=$(replace_token "$standard_path" "vendor" "$(get_composer_vendor_dir)")
     standard_path=$(replace_token "$standard_path" "dcr" "$(get_dcr_dir)")
     standard_path=$(replace_token "$standard_path" "current" "$(get_current_dir)")
     standard_path=$(replace_token "$standard_path" "project" "$(get_conf_dir)")

     if [ -d $standard_path ] ; then
      installed_paths=${installed_paths},${standard_path}
     fi
     count=$(( $count + 1 ))
  done

  if [ -z "${installed_paths}" ] ; then
    secho changed "No valid standards' paths provided."
  fi

  # Remove leading comma.
  installed_paths=${installed_paths:1}

  codesniffer_config_set $command_phpcs installed_paths $installed_paths
  codesniffer_config_set $command_phpcbf installed_paths $installed_paths
  secho changed "Set installed_path to $installed_paths."
}

#
# Replace token in provided subject.
#
replace_token() {
  local subject=$1
  local token=$2
  local replacement=$3
  local command_sed=$(which sed)
  echo $(echo $subject | $command_sed -e "s?%${token}%?${replacement}?g")
}

#
# Set installed_path value for codesniffer.
#
codesniffer_config_set() {
  local command=$1
  local name=$2
  local value=$3
  $command --config-set $name $value > /dev/null
}

#
# Install JSCS.
#
install_jscs() {
  local command_npm=$(get_npm)

  command_global=""
  if $(install_is_global) ; then
    command_global=" -g "
  fi

  # Install JSCS.
  $command_npm list $command_global jscs >> /dev/null
  local jscs_installed=$?

  if [ $jscs_installed -eq 0 ] ; then
    secho status "JSCS is already installed"
  else
    secho changed "Installing JSCS"
    $command_npm install $command_global jscs
  fi
}

#
# Register JSCS standards.
#
register_jscs_standards() {
  local command_phpcs=$(which phpcs)
  local jscs_path=$(get_jscs_bin_dir)

  # Create JSCS standards and configs.
  create_jscs_standards

  # Set JSCS binary path.
  codesniffer_config_set $command_phpcs "jscs_path" "$jscs_path"
}

#
# Create JSCS standards and configs.
#
create_jscs_standards() {
  local src_jscs_conf=$(get_dcr_dir)/$DCR_JSCSRC_CONF_EXAMPLE
  local dst_file=$(get_conf_dir)/$DCR_JSCSRC_CONF
  if [ -f $dst_file ] ; then
    secho status "Skipping copying of $DCR_JSCSRC_CONF file - file $dst_file exists."
  else
    cp $src_jscs_conf $dst_file
    secho changed "Copied example $DCR_JSCSRC_CONF file $src_jscs_conf to $dst_file."
  fi
}

#
# Validate DCR installation.
#
validate_install() {
  which dcr>/dev/null
  local code=$?
  if [ "$code" == 0 ]; then
    secho changed "DCR was successfully installed and is available in current session"
    return 0
  else
    secho error "DCR was not successfully installed and is not available in current session"
    return 1
  fi
}

#
# Get DCR file location.
#
get_dcr() {
  echo $(get_realpath "${BASH_SOURCE[0]}")
}

#
# Get 'dcr' file location directory.
#
get_dcr_dir() {
  echo $(_directory $(get_dcr))
}

#
# Get the directory where script was invoked.
#
get_current_dir() {
  echo $(pwd)
}

#
# Get the directory where configuration file resides.
#
get_conf_dir() {
  echo $(_directory $(get_conf_file))
}

#
# Get conf file location.
#
get_conf_file() {
  echo $(upfind "$DCR_CONF")
}

#
# Get composer home directory.
#
get_composer_home_dir() {
  local tail=$(which tail)
  echo $(composer config -g home 2>&1|tail -n 1)
}

#
# Get composer bin directory.
#
get_composer_bin_dir() {
  local tail=$(which tail)
  local bin_dir=$(composer config -g bin-dir 2>&1|tail -n 1)
  local conf_dir=$(get_conf_dir)

  if [ -z "$conf_dir" ]; then
    return 1
  fi

  if $(install_is_global) ; then
    echo $(get_composer_home_dir)/$bin_dir
  else
    echo $conf_dir/$bin_dir
  fi
}

#
# Get composer vendor directory.
#
get_composer_vendor_dir() {
  local tail=$(which tail)
  local vendor_dir=$(composer config -g vendor-dir 2>&1|tail -n 1)
  local conf_dir=$(get_conf_dir)

  if [ -z "$conf_dir" ]; then
    return 1
  fi

  if $(install_is_global); then
    echo $(get_composer_home_dir)/$vendor_dir
  else
    echo $conf_dir/$vendor_dir
  fi
}

#
# Check if DCR is installed globally.
#
install_is_global() {
  local composer_home=$(get_composer_home_dir)
  local dcr_dir=$(get_dcr_dir)
  if [[ "$dcr_dir" =~ "$composer_home" ]]; then
    # DCR is ran from global context.
    return 0
  else
    # DCR is ran from local context.
    return 1
  fi
}

#
# Get install type as a string.
#
get_install_type() {
  if $(install_is_global) ; then
    echo 'Global'
  else
    echo 'Local'
  fi
}

#
# Get npm path.
#
get_npm() {
  echo $(which npm)
}

#
# Get npm bin path.
#
# Automatically resolve to global path if this is a global installation.
#
get_jscs_bin_dir() {
  local command=""
  if $(install_is_global) ; then
    command=$(npm bin -g)
  else
    command=$(npm bin)
  fi
  echo $command
}

#
# Find file in current and all parent directories.
#
upfind() {
  local command_find=$(which find);
  local current_dir=$(get_current_dir)
  local result=""

  while [[ $PWD != / ]] ; do
    result=$($command_find "$PWD"/ -maxdepth 1 -name "$@")
    if [ -n "$result" ]; then
      break
    fi
    cd ..
  done

  cd $current_dir

  echo $result
}

#
# Simple key/value YAML parser.
#
parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

#
# Status echo.
#
secho(){
  local type=$1
  local message=$2
  case "$type" in
    status) cecho blue "=> $message";;
    changed) cecho green "=> $message";;
    error) cecho red "=> $message";;
    *) echo $message
  esac
}

#
# Colored echo.
#
cecho() {
  local prefix="\033["
  local input_color=$1
  local message="$2"

  local color=""
  case "$input_color" in
    black  | bk) color="${prefix}0;30m";;
    red    |  r) color="${prefix}1;31m";;
    green  |  g) color="${prefix}1;32m";;
    yellow |  y) color="${prefix}1;33m";;
    blue   |  b) color="${prefix}1;34m";;
    purple |  p) color="${prefix}1;35m";;
    cyan   |  c) color="${prefix}1;36m";;
    gray   | gr) color="${prefix}0;37m";;
    *) message="$1"
  esac

  # Format message with color codes, but only if in terminal and a correct color
  # was provided.
  [ -t 1 ] && [ -n "$color" ] && message="${color}${message}${prefix}0m"

  echo -e "$message"
}

################################################################################
# realpath-lib : realpath library for bash file path resolution and validation.
################################################################################
# https://github.com/AsymLabs/realpath-lib
#
# Huge thanks to teh authors!
#
# This library is included directly, because sourcing it requires to know
# original file path, which is the whole reason why this library is required in
# the first place.
################################################################################
readonly RPL_VERSION='2013.11.19.00'
readonly RPL_SYMLINK_LIMIT='40'
if [[ -z "$set_max_depth" ]]
then
    set_max_depth=5
fi

# _exit_states : simple exit states array that corresponds (one to one) with
# the array _exit_solutions[] below.
readonly _exit_states=(
    'Normal exit status, exited successfully'
    'No file found, special file type or broken symlink issues'
    'General path to file assembly/construction issues'
    'Physical path to file assembly/resolution issues'
    'Exceeded symlink recursion depth (max=$set_max_depth)'
    'Exceeded symlink recursion limit (built-in or kernel)'
    'Symlink circular reference issue has been detected'
    "Cannot locate utility 'ls', cannot proceed further"
    'Unspecified or unknown condition, posssible issues'
)

# _exit solutions : used with error logs - do not alter! Must have one entry
# for each of _exit_states[].
readonly _exit_solutions=(
    'No solution is needed for normal exit status'
    'Check that file path exists, is not special and is not broken'
    'Path may be empty, may have syntax errors and/or special symbols'
    'Path may be empty, may have syntax errors and/or special symbols'
    "Alter max ($set_max_depth) by increasing 'set_max_depth'"
    'No solution offered for exceeding symlink recursion limit'
    'Symlink circular reference should be investigated manually'
    "Enable 'set_logical=true' or install Posix utility 'ls'"
    'Cannot provide solution for unspecified or unknown errors'
)

# _unroll array : unroll an array passed by reference, in this case the history
# of links.
function _unroll(){
    local _el                # element.
    local _cntr=0            # counter.
    local _array=$1[@]       # array by ref.
    for _el in ${!_array}    # unroll array.
    do
        printf 'L [%02d] -> %s\n' "$_cntr" "$_el" 1>&2
        (( _cntr++ ))
    done
}

# _log_error code [fatal] : log according to return value (private function).
# use optional argument 'fatal' to exit execution - send to stderr.
function _log_error(){
    local _code _maxm
    _code=$1
    _maxm=$(( ${#_exit_states[@]} - 1 ))
    (( $_code > $_maxm )) && _code=$_maxm
    printf 'E [%02d] %s ...\n-----> %s ...\n' "$_code" "${_exit_states[$_code]}" "${_exit_solutions[$_code]}" 1>&2
    [[ "$2" = 'fatal' ]] && exit $_code
}

# _file "path/to/file" : print the file of a given path (private function).
function _file(){
    [[ -n "$1" ]] && printf '%s' "${1##*/}"
}

# _directory "path/to/file" : get the directory of a path (private function)
function _directory(){
    [[ -n "$1" ]] && local string=${1%/*} && string=${string%/} && printf '%s' "$string"
}

# _cd "path/to/file" : change to the directory of a path (private function).
function _cd(){
    cd "$(_directory "$1")" 2>/dev/null
}

# GET_REALPATH
# get_realpath "path/to/file" : echo the realpath as logical or physical,
# depending upon the environment settings.
#
# Fri Nov 15 10:08:53 GMT 2013 : Major revision includes the introduction of
# recursion and production of error messages to stderr.  Also added errors
# related to recursion depth controls.
#
# DESIGN NOTE: Errors are permitted ONLY within this function by design.  All
# other functions reflect return values, or exit based upon the conditions
# generated and emitted by this function.  This is done to ensure that return
# conditions and error messages are not duplicated.
function get_realpath(){
    # 0 : Pass.
    # 1 : Fail : no file found/symlink broken/not regular file errors.
    # 2 : Fail : physical file path assembly/resolution error.
    # 3 : Fail : logical or physical path assembly/construction error.
    # 4 : Fail : exceeded symlink max specified recursion error.
    # 5 : Fail : exceeded symlink system limit recusion error.
    # 6 : Fail : symlink circular reference detection error.
    # 7 : Fail : the utility 'ls' does not exist error.

    # File must exist, must be regular, and symlink cannot be broken.
    if [[ -n "$set_strict" ]]; then
        [[ ! -f "$1" ]] && {
            _log_error 1                               # emit error 1.
            return 1                                   # throw status 1.
        }
    fi

    # Declare locals/initialize some.
    local _el         # element of array
    local _ls         # ls command result
    local _lk         # next symlink path
    local _lkdir      # symlink directory
    local _lkfile     # symlink file name
    local _pd='pwd'   # present directory
    local _cntr=0     # recursion counter
    local _path="$1"  # path string cache
    local -a _paths   # paths history array

    # Begin procedures.
    if [[ -z "$set_logical" ]]
    then

        # Reset _pd
        _pd='pwd -P'

        # Look for symlinked file.
        if [[ -L "$_path" ]]; then

            # Check that ls exists or throw.
            hash ls || {
                _log_error 7                           # emit error 7.
                return 7                               # throw status 7.
            }

            # Recurse through link chain.
            while [[ -L "$_path" ]]
            do

                # Set temporaries, assemble path or throw.
                _ls="$( ls -dl "$_path" 2>/dev/null )" &&
                _lk="$( printf '%s' "${_ls#*"${_path} -> "}" )" &&
                _lkdir="$( _cd "$_path"; _cd "$_lk"; $_pd )" &&
                _lkfile="$(_file "$_lk")" && {
                    [[ -z "$_lkdir" ]] && _path="$_lkfile" || _path="$_lkdir"/"$_lkfile"
                } || {
                    _log_error 3                       # emit error 3.
                    return 3                           # throw status 3.
                }

                # Enforce circular reference detection. This is a brute force
                # method, stores history.  If detected, unwinds full chain
                # history to stderr and throws.
                (( $_cntr )) && {                      # min two elements.
                    for _el in ${_paths[@]}
                    do
                        [[ "$_el" == "$_path" ]] && {  # find duplicate.
                            _paths[$_cntr]="$_path"    # insert duplicate.
                            _unroll _paths             # unroll paths.
                            _log_error 6               # emit error 6.
                            return 6                   # throw status 6.
                        }
                    done
                }

                # Store history.
                _paths[$_cntr]="$_path"

                # Increment.
                (( _cntr++ ))

                # Enforce user specified maximum recursion $set_max_depth or
                # throw.
                (( $_cntr == $set_max_depth )) && {
                    _unroll _paths                     # unroll paths.
                    _log_error 4                       # emit error 4.
                    return 4                           # throw status 4.
                }

                # Enforce built-in depth limit $RPL_SYMLINK_LIMIT - overrides
                # custom environment set_max_depth and throws.
                (( $_cntr == $RPL_SYMLINK_LIMIT )) && {
                    _unroll _paths                     # unroll paths.
                    _log_error 5                       # emit error 5.
                    return 5                           # throw status 5.
                }

            done

            echo "$_path"                              # emit path.
            return 0                                   # throw status 0.

       fi

    fi

    # Resolve links, assemble path or throw.
    _lkdir="$( _cd "$_path"; $_pd )" &&
    _lkfile="$(_file "$_path")" && {
        [[ -z "$_lkdir" ]] && _path="$_lkfile" || _path="$_lkdir"/"$_lkfile"
    } || {
        _log_error 3                                   # emit error 3.
        return 3                                       # throw status 3.
    }

    echo "$_path"                                      # emit path.
    return 0                                           # throw status 0.

}
################################################################################
# end of realpath-lib
################################################################################

main "$@"
